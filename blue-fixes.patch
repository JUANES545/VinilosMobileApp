Subject: [PATCH] Blue fixes
---
Index: app/src/main/java/com/example/vinilosmobileapp/model/dto/AlbumCreateDTO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/vinilosmobileapp/model/dto/AlbumCreateDTO.kt b/app/src/main/java/com/example/vinilosmobileapp/model/dto/AlbumCreateDTO.kt
--- a/app/src/main/java/com/example/vinilosmobileapp/model/dto/AlbumCreateDTO.kt	(revision abfd3d0638be5d9f9c41d219929fd04195311852)
+++ b/app/src/main/java/com/example/vinilosmobileapp/model/dto/AlbumCreateDTO.kt	(date 1745942967322)
@@ -1,8 +1,5 @@
 package com.example.vinilosmobileapp.model.dto
 
-import com.example.vinilosmobileapp.model.Comment
-import com.example.vinilosmobileapp.model.Track
-
 data class AlbumCreateDTO(
     val name: String,
     val cover: String,
Index: app/src/main/java/com/example/vinilosmobileapp/ui/album/CreateAlbumFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/vinilosmobileapp/ui/album/CreateAlbumFragment.kt b/app/src/main/java/com/example/vinilosmobileapp/ui/album/CreateAlbumFragment.kt
--- a/app/src/main/java/com/example/vinilosmobileapp/ui/album/CreateAlbumFragment.kt	(revision abfd3d0638be5d9f9c41d219929fd04195311852)
+++ b/app/src/main/java/com/example/vinilosmobileapp/ui/album/CreateAlbumFragment.kt	(date 1745946449517)
@@ -12,6 +12,7 @@
 import androidx.appcompat.app.AppCompatActivity
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.viewModels
+import androidx.recyclerview.widget.GridLayoutManager
 import androidx.recyclerview.widget.LinearLayoutManager
 import coil.load
 import com.example.vinilosmobileapp.R
@@ -130,7 +131,7 @@
 
         trackInputAdapter = TrackInputAdapter(emptyList())
         binding.recyclerViewTracks.apply {
-            layoutManager = LinearLayoutManager(context)
+            layoutManager = GridLayoutManager(context, 3)
             adapter = trackInputAdapter
         }
     }
@@ -203,93 +204,112 @@
 
         Log.d("CreateAlbum", "üöÄ Creando √°lbum: $albumCreateDTO")
 
-
-        Log.d(
-            "CreateAlbum",
-            "üöÄ Enviando solo el √°lbum (sin comentarios ni tracks todav√≠a): $albumCreateDTO"
-        )
-
-        // üöÄ Primero creamos el √°lbum
         AlbumServiceAdapter.createAlbum(albumCreateDTO).enqueue(object : Callback<Album> {
             override fun onResponse(call: Call<Album>, response: Response<Album>) {
                 if (response.isSuccessful) {
-                    response.body()?.let { album ->
-                        Log.i("CreateAlbum", "‚úÖ √Ålbum creado con ID: ${album.id}")
-                        // üöÄ 2) Ahora s√≠ posteamos s√≥lo lo que realmente agreg√≥ el usuario
-                        postCommentsAndTracks(album.id)
+                    val createdAlbum = response.body()
+                    if (createdAlbum != null) {
+                        Log.i("CreateAlbum", "‚úÖ √Ålbum creado con ID: ${createdAlbum.id}")
+                        sendCommentsAndTracks(createdAlbum.id)
                     }
                 } else {
-                    Toast.makeText(requireContext(), "Error creando √°lbum", Toast.LENGTH_SHORT)
-                        .show()
+                    Log.e(
+                        "CreateAlbum",
+                        "‚ùå Error al crear √°lbum: ${response.code()} - ${
+                            response.errorBody()?.string()
+                        }"
+                    )
+                    Toast.makeText(
+                        requireContext(),
+                        "Error al crear el √°lbum",
+                        Toast.LENGTH_LONG
+                    ).show()
                 }
             }
 
             override fun onFailure(call: Call<Album>, t: Throwable) {
-                Toast.makeText(requireContext(), "Error de red creando √°lbum", Toast.LENGTH_SHORT)
-                    .show()
+                Log.e("CreateAlbum", "‚ùå Error de red al crear √°lbum: ${t.localizedMessage}")
+                Toast.makeText(
+                    requireContext(),
+                    "Error de red al crear el √°lbum",
+                    Toast.LENGTH_LONG
+                ).show()
             }
         })
     }
 
-    private fun postCommentsAndTracks(albumId: Int) {
-        val comments = commentInputAdapter.getComments()
-        val tracks = trackInputAdapter.getTracks()
-
+    private fun sendCommentsAndTracks(albumId: Int) {
         var pendingRequests = 0
         var hasErrors = false
 
-        if (comments.isNotEmpty()) {
-            pendingRequests += comments.size
-            comments.forEach { comment ->
-                val commentDTO = CommentCreateDTO(
-                    description = comment.description,
-                    rating = comment.rating,
-                    collector = CollectorReferenceDTO(comment.collector?.id ?: 1)
-                )
-                AlbumServiceAdapter.addCommentToAlbum(albumId, commentDTO)
-                    .enqueue(object : Callback<Void> {
-                        override fun onResponse(call: Call<Void>, response: Response<Void>) {
-                            pendingRequests--
-                            if (!response.isSuccessful) hasErrors = true
-                            checkPendingRequests(pendingRequests, hasErrors)
-                        }
+        // Enviar comentarios
+        for (comment in commentInputAdapter.getComments()) {
+            pendingRequests++
+            val commentDTO = CommentCreateDTO(
+                description = comment.description,
+                rating = comment.rating,
+                collector = CollectorReferenceDTO(comment.collector?.id ?: 1) // Default ID
+            )
+            AlbumServiceAdapter.addCommentToAlbum(albumId, commentDTO)
+                .enqueue(object : Callback<Void> {
+                    override fun onResponse(call: Call<Void>, response: Response<Void>) {
+                        pendingRequests--
+                        if (!response.isSuccessful) {
+                            hasErrors = true
+                            Log.e(
+                                "CreateAlbum",
+                                "‚ùå Error al crear comentario: ${response.code()} - ${
+                                    response.errorBody()?.string()
+                                }"
+                            )
+                        }
+                        checkPendingRequests(pendingRequests, hasErrors)
+                    }
 
-                        override fun onFailure(call: Call<Void>, t: Throwable) {
-                            pendingRequests--
-                            hasErrors = true
-                            checkPendingRequests(pendingRequests, hasErrors)
-                        }
-                    })
-            }
+                    override fun onFailure(call: Call<Void>, t: Throwable) {
+                        pendingRequests--
+                        hasErrors = true
+                        Log.e(
+                            "CreateAlbum",
+                            "‚ùå Error de red al crear comentario: ${t.localizedMessage}"
+                        )
+                        checkPendingRequests(pendingRequests, hasErrors)
+                    }
+                })
         }
 
-        if (tracks.isNotEmpty()) {
-            pendingRequests += tracks.size
-            tracks.forEach { track ->
-                val trackDTO = TrackCreateDTO(
-                    name = track.name,
-                    duration = track.duration ?: "3:30 min"
-                )
-                AlbumServiceAdapter.addTrackToAlbum(albumId, trackDTO)
-                    .enqueue(object : Callback<Void> {
-                        override fun onResponse(call: Call<Void>, response: Response<Void>) {
-                            pendingRequests--
-                            if (!response.isSuccessful) hasErrors = true
-                            checkPendingRequests(pendingRequests, hasErrors)
-                        }
+        // Enviar tracks
+        for (track in trackInputAdapter.getTracks()) {
+            pendingRequests++
+            val trackDTO =
+                TrackCreateDTO(name = track.name, duration = track.duration ?: "3:30 min")
+            AlbumServiceAdapter.addTrackToAlbum(albumId, trackDTO).enqueue(object : Callback<Void> {
+                override fun onResponse(call: Call<Void>, response: Response<Void>) {
+                    pendingRequests--
+                    if (!response.isSuccessful) {
+                        hasErrors = true
+                        Log.e(
+                            "CreateAlbum",
+                            "‚ùå Error al crear track: ${response.code()} - ${
+                                response.errorBody()?.string()
+                            }"
+                        )
+                    }
+                    checkPendingRequests(pendingRequests, hasErrors)
+                }
 
-                        override fun onFailure(call: Call<Void>, t: Throwable) {
-                            pendingRequests--
-                            hasErrors = true
-                            checkPendingRequests(pendingRequests, hasErrors)
-                        }
-                    })
-            }
+                override fun onFailure(call: Call<Void>, t: Throwable) {
+                    pendingRequests--
+                    hasErrors = true
+                    Log.e("CreateAlbum", "‚ùå Error de red al crear track: ${t.localizedMessage}")
+                    checkPendingRequests(pendingRequests, hasErrors)
+                }
+            })
         }
-        if (comments.isEmpty() && tracks.isEmpty()) {
-            Toast.makeText(requireContext(), "√Ålbum creado exitosamente", Toast.LENGTH_SHORT).show()
-            parentFragmentManager.setFragmentResult("album_created", Bundle())
-            requireActivity().onBackPressedDispatcher.onBackPressed()
+
+        // Si no hay comentarios ni tracks, verificar inmediatamente
+        if (pendingRequests == 0) {
+            checkPendingRequests(pendingRequests, hasErrors)
         }
     }
 
@@ -298,20 +318,50 @@
             if (hasErrors) {
                 Toast.makeText(
                     requireContext(),
-                    "Error parcial al crear comentarios o canciones",
-                    Toast.LENGTH_SHORT
+                    "√Ålbum creado, pero hubo errores al agregar comentarios o canciones",
+                    Toast.LENGTH_LONG
                 ).show()
             } else {
                 Toast.makeText(
                     requireContext(),
                     "√Ålbum y contenido creado exitosamente",
-                    Toast.LENGTH_SHORT
+                    Toast.LENGTH_LONG
                 ).show()
-                parentFragmentManager.setFragmentResult("album_created", Bundle())
-                requireActivity().onBackPressedDispatcher.onBackPressed()
+            }
+            // Notificar al HomeFragment y regresar
+            parentFragmentManager.setFragmentResult("album_created", Bundle())
+            requireActivity().onBackPressedDispatcher.onBackPressed()
+        }
+    }
+
+
+    private fun createGuestCollector(onGuestCreated: (Int) -> Unit) {
+        val guestName = "Guest_${System.currentTimeMillis()}"
+        AlbumServiceAdapter.createCollector(
+            name = guestName,
+            telephone = "000-0000000",
+            email = "$guestName@example.com"
+        ).enqueue(object : Callback<Collector> {
+            override fun onResponse(call: Call<Collector>, response: Response<Collector>) {
+                if (response.isSuccessful) {
+                    val guestCollector = response.body()
+                    if (guestCollector != null) {
+                        Log.i("CreateAlbum", "‚úÖ Guest creado con ID: ${guestCollector.id}")
+                        onGuestCreated(guestCollector.id)
+                    } else {
+                        Log.e("CreateAlbum", "‚ùå Error creando guest: respuesta vac√≠a")
+                    }
+                } else {
+                    Log.e("CreateAlbum", "‚ùå Error creando guest: ${response.code()}")
+                }
             }
-        }
+
+            override fun onFailure(call: Call<Collector>, t: Throwable) {
+                Log.e("CreateAlbum", "‚ùå Error de red creando guest: ${t.localizedMessage}")
+            }
+        })
     }
+
 
     private fun fetchCollectors() {
         AlbumServiceAdapter.getCollectors().enqueue(object : Callback<List<Collector>> {
Index: app/src/main/res/layout/item_track.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/item_track.xml b/app/src/main/res/layout/item_track.xml
--- a/app/src/main/res/layout/item_track.xml	(revision abfd3d0638be5d9f9c41d219929fd04195311852)
+++ b/app/src/main/res/layout/item_track.xml	(date 1745942295710)
@@ -3,7 +3,8 @@
     xmlns:card_view="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:layout_marginHorizontal="16dp"
+    android:layout_marginHorizontal="4dp"
+    android:layout_marginTop="4dp"
     android:layout_marginBottom="8dp"
     android:background="@color/white"
     card_view:cardCornerRadius="12dp"
